// Supabase Edge Function to verify OTP and sign up/in a user with phone number
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

serve(async (req) => {
  console.log('verify-otp: Function invoked - method:', req.method);

  try {
    // CORS headers for preflight requests
    if (req.method === 'OPTIONS') {
      console.log('verify-otp: Handling OPTIONS request');
      return new Response(null, {
        status: 204,
        headers: {
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Methods': 'POST, OPTIONS',
          'Access-Control-Allow-Headers': 'Content-Type, Authorization, apikey, x-client-info',
        },
      });
    }
    
    // Only allow POST requests
    if (req.method !== 'POST') {
      console.log(`verify-otp: Invalid method: ${req.method}`);
      return new Response(JSON.stringify({ error: 'Method not allowed' }), {
        status: 405,
        headers: { 
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
      });
    }

    // Get request body
    let bodyText;
    try {
      bodyText = await req.text();
      console.log('verify-otp: Received request body:', bodyText);
    } catch (e) {
      console.error('verify-otp: Error reading request body:', e);
      return new Response(JSON.stringify({ error: 'Error reading request body' }), {
        status: 400,
        headers: { 
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
      });
    }

    let body;
    try {
      body = JSON.parse(bodyText);
    } catch (e) {
      console.error('verify-otp: Error parsing request JSON:', e);
      return new Response(JSON.stringify({ error: 'Invalid JSON in request body' }), {
        status: 400,
        headers: { 
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
      });
    }

    // Handle both 'phoneNumber' and 'phone' parameters for compatibility
    const phoneNumber = body.phoneNumber || body.phone;
    const { otp, password, firstName, lastName } = body;
    const marketingConsent = body.marketingConsent || false;
    
    console.log('verify-otp: Parsed phone number:', phoneNumber);
    
    if (!phoneNumber || !otp) {
      console.log('verify-otp: Missing required fields:', { 
        hasPhoneNumber: !!phoneNumber, 
        hasOtp: !!otp 
      });
      return new Response(JSON.stringify({ error: 'Phone number and OTP are required' }), {
        status: 400,
        headers: { 
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
      });
    }

    if (!password) {
      console.log('verify-otp: Missing password field');
      return new Response(JSON.stringify({ error: 'Password is required' }), {
        status: 400,
        headers: { 
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
      });
    }
    
    // Initialize Supabase client with admin privileges
    console.log('verify-otp: Initializing Supabase client');
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
    console.log('verify-otp: Have Supabase URL:', !!supabaseUrl);
    console.log('verify-otp: Have Supabase key:', !!supabaseKey);
    
    if (!supabaseUrl || !supabaseKey) {
      console.error('verify-otp: Missing Supabase credentials');
      return new Response(JSON.stringify({ error: 'Database configuration error' }), {
        status: 500,
        headers: { 
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
      });
    }
    
    const supabaseAdmin = createClient(
      supabaseUrl,
      supabaseKey,
      {
        auth: {
          autoRefreshToken: false,
          persistSession: false
        }
      }
    );

    // Get the stored OTP
    console.log('verify-otp: Fetching stored OTP for phone number:', phoneNumber);
    const { data: otpData, error: otpError } = await supabaseAdmin
      .from('phone_auth_codes')
      .select('*')
      .eq('phone_number', phoneNumber)
      .single();

    if (otpError || !otpData) {
      console.error('verify-otp: Error retrieving OTP:', otpError);
      return new Response(JSON.stringify({ error: 'No verification code found for this phone number' }), {
        status: 404,
        headers: { 
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
      });
    }
    console.log('verify-otp: Found OTP entry:', { id: otpData.id, verified: otpData.verified });

    // Check if OTP is expired
    const expiresAt = new Date(otpData.expires_at);
    const now = new Date();
    console.log('verify-otp: OTP expiry check - expires:', expiresAt.toISOString(), 'now:', now.toISOString());
    
    if (expiresAt < now) {
      console.log('verify-otp: OTP expired');
      return new Response(JSON.stringify({ error: 'Verification code expired. Please request a new one.' }), {
        status: 400,
        headers: { 
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
      });
    }

    // Check if OTP matches
    console.log('verify-otp: Checking OTP match - provided:', otp, 'stored:', otpData.code);
    if (otpData.code !== otp) {
      console.log('verify-otp: Invalid OTP provided');
      return new Response(JSON.stringify({ error: 'Invalid verification code' }), {
        status: 400,
        headers: { 
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
      });
    }

    // Check if OTP has already been verified
    if (otpData.verified) {
      console.log('verify-otp: OTP already used');
      return new Response(JSON.stringify({ error: 'This verification code has already been used' }), {
        status: 400,
        headers: { 
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
      });
    }

    // Mark OTP as verified
    console.log('verify-otp: Marking OTP as verified');
    const { error: updateError } = await supabaseAdmin
      .from('phone_auth_codes')
      .update({ verified: true })
      .eq('phone_number', phoneNumber);

    if (updateError) {
      console.error('verify-otp: Error updating OTP status:', updateError);
      return new Response(JSON.stringify({ error: 'Error updating verification status' }), {
        status: 500,
        headers: { 
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
      });
    }
    console.log('verify-otp: OTP marked as verified successfully');

    // Check if a user with this phone number already exists in profiles
    console.log('verify-otp: Checking if user exists with phone number:', phoneNumber);
    
    // Check in profiles table
    const { data: existingUsers, error: userQueryError } = await supabaseAdmin
      .from('profiles')
      .select('id')
      .eq('phone_number', phoneNumber);

    if (userQueryError) {
      console.error('verify-otp: Error checking profiles:', userQueryError);
    }

    // Create unique identifier for the phone-based user
    const phoneIdentifier = `${phoneNumber.replace(/[+]/g, '')}@phone.arazial.com`;
    
    let userId;
    let isNewUser = false;
    
    // If we found a user in profiles table
    if (!userQueryError && existingUsers && existingUsers.length > 0) {
      userId = existingUsers[0].id;
      console.log('verify-otp: Existing user found in profiles with ID:', userId);
      
      // Update user password
      console.log('verify-otp: Updating password for existing user');
      
      try {
        const { error: updatePwError } = await supabaseAdmin.auth.admin.updateUserById(
          userId,
          { password }
        );
        
        if (updatePwError) {
          console.error('verify-otp: Error updating password:', updatePwError);
          return new Response(JSON.stringify({ error: 'Error updating password' }), {
            status: 500,
            headers: { 
              'Content-Type': 'application/json',
              'Access-Control-Allow-Origin': '*',
            },
          });
        }
      } catch (err) {
        console.error('verify-otp: Exception updating password:', err);
        return new Response(JSON.stringify({ error: 'Error updating password' }), {
          status: 500,
          headers: { 
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*',
          },
        });
      }
      
      // Update profile with marketing consent and name details if provided
      const updateData: Record<string, any> = {
        updated_at: new Date(),
        marketing_consent: marketingConsent
      };
      
      // Only add name fields if they are provided
      if (firstName) updateData.first_name = firstName;
      if (lastName) updateData.last_name = lastName;
      
      console.log('verify-otp: Updating profile for existing user');
      await supabaseAdmin
        .from('profiles')
        .update(updateData)
        .eq('id', userId);
    }
    // Create new user if not found in profiles
    else {
      console.log('verify-otp: No existing user found, creating new user');
      
      try {
        // Try to create a new user
        console.log('verify-otp: Creating user with phone identifier:', phoneIdentifier);
        
        // First, check if we can sign in with these credentials
        // This handles the case where the user might exist in auth but not in profiles
        let signInCheckData = null;
        try {
          const { data, error: signInCheckError } = await supabaseAdmin.auth.signInWithPassword({
            email: phoneIdentifier,
            password,
          });
          
          if (!signInCheckError) {
            signInCheckData = data;
          } else {
            console.log('verify-otp: Sign-in check failed, user likely does not exist:', signInCheckError.message);
          }
        } catch (err) {
          console.log('verify-otp: Error during sign-in check, proceeding with new user creation:', err);
        }
        
        if (signInCheckData?.user) {
          // User exists in auth but not in profiles
          console.log('verify-otp: User exists in auth but not in profiles:', signInCheckData.user.id);
          userId = signInCheckData.user.id;
          
          // Create missing profile
          const { error: profileError } = await supabaseAdmin
            .from('profiles')
            .insert({
              id: userId,
              phone_number: phoneNumber,
              first_name: firstName,
              last_name: lastName,
              marketing_consent: marketingConsent,
              created_at: new Date(),
              updated_at: new Date()
            });
          
          if (profileError) {
            console.error('verify-otp: Error creating profile for existing auth user:', profileError);
          }
        } else {
          // User doesn't exist, create new user
          console.log('verify-otp: Creating completely new user');
          
          // Create new user
          let authData = null;
          let signUpError = null;
          
          try {
            // Try creating user with admin.createUser first
            const result = await supabaseAdmin.auth.admin.createUser({
              email: phoneIdentifier,
              password,
              phone: phoneNumber,
              email_confirm: true,
              phone_confirm: true
            });
            
            authData = result.data;
            signUpError = result.error;
          } catch (err) {
            console.error('verify-otp: Exception during createUser:', err);
            // Keep signUpError null to try alternative approach below
          }
          
          // If the first method failed, try an alternative approach
          if (signUpError || !authData?.user) {
            console.log('verify-otp: First user creation method failed, trying alternative approach');
            
            try {
              // Alternative: Use signUp instead of admin.createUser
              const { data: altData, error: altError } = await supabaseAdmin.auth.signUp({
                email: phoneIdentifier,
                password,
                phone: phoneNumber,
                options: {
                  data: {
                    phone_number: phoneNumber,
                    registration_method: 'phone_otp'
                  }
                }
              });
              
              if (!altError && altData?.user) {
                console.log('verify-otp: Alternative user creation succeeded');
                authData = altData;
                signUpError = null;
                
                // Manually confirm the user since we're not using admin.createUser
                const { error: confirmError } = await supabaseAdmin.auth.admin.updateUserById(
                  altData.user.id, 
                  { email_confirm: true, phone_confirm: true }
                );
                
                if (confirmError) {
                  console.error('verify-otp: Error confirming user:', confirmError);
                }
              } else {
                console.error('verify-otp: Alternative user creation also failed:', altError);
                signUpError = altError;
              }
            } catch (altErr) {
              console.error('verify-otp: Exception during alternative user creation:', altErr);
              // Preserve original error if alternative also fails
              if (!signUpError) signUpError = { message: 'Both user creation methods failed' };
            }
          }
          
          if (signUpError) {
            console.error('verify-otp: Error creating user:', signUpError);
            console.error('verify-otp: Error details:', JSON.stringify(signUpError, null, 2));
            return new Response(JSON.stringify({ error: 'Error creating user account' }), {
              status: 500,
              headers: { 
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
              },
            });
          }
          
          // Set user metadata after creation
          if (authData?.user) {
            const { error: metadataError } = await supabaseAdmin.auth.admin.updateUserById(
              authData.user.id,
              {
                user_metadata: {
                  phone_number: phoneNumber,
                  registration_method: 'phone_otp'
                }
              }
            );
            
            if (metadataError) {
              console.error('verify-otp: Error setting user metadata:', metadataError);
            }
            
            console.log('verify-otp: User created successfully:', authData.user.id);
            userId = authData.user.id;
            isNewUser = true;
            
            // Create a profile for the new user
            console.log('verify-otp: Creating profile for new user');
            const { error: profileError } = await supabaseAdmin
              .from('profiles')
              .insert({
                id: userId,
                phone_number: phoneNumber,
                first_name: firstName,
                last_name: lastName,
                marketing_consent: marketingConsent,
                created_at: new Date(),
                updated_at: new Date()
              });
              
            if (profileError) {
              console.error('verify-otp: Error creating profile:', profileError);
              // Don't return error here, still proceed with login
            } else {
              console.log('verify-otp: Profile created successfully');
            }
          } else {
            console.error('verify-otp: No user data available after creation attempts');
            return new Response(JSON.stringify({ error: 'Failed to create user account' }), {
              status: 500,
              headers: { 
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
              },
            });
          }
        } catch (error) {
          console.error('verify-otp: Unexpected error during user creation:', error);
          return new Response(JSON.stringify({ error: 'Unexpected error during user creation' }), {
            status: 500,
            headers: { 
              'Content-Type': 'application/json',
              'Access-Control-Allow-Origin': '*',
            },
          });
        }
      }
    }

    // If we don't have a userId by now, something went wrong
    if (!userId) {
      console.error('verify-otp: Failed to get or create user');
      return new Response(JSON.stringify({ error: 'Failed to get or create user account' }), {
        status: 500,
        headers: { 
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
      });
    }
    
    // Sign in the user directly
    console.log('verify-otp: Signing in user with phone identifier:', phoneIdentifier);
    
    const { data: signInData, error: signInError } = await supabaseAdmin.auth.signInWithPassword({
      email: phoneIdentifier,
      password,
    });

    if (signInError) {
      console.error('verify-otp: Error signing in user:', signInError);
      console.error('verify-otp: Error details:', JSON.stringify(signInError, null, 2));
      return new Response(JSON.stringify({ 
        error: 'Phone verification successful but automatic login failed. Please login manually.' 
      }), {
        status: 500,
        headers: { 
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
      });
    }
    console.log('verify-otp: User signed in successfully');

    // Return success with token and session
    console.log('verify-otp: Returning success response');
    return new Response(JSON.stringify({
      success: true,
      message: isNewUser ? 'Account created and verification successful' : 'Verification successful',
      user: {
        id: userId,
        phone_number: phoneNumber,
        is_new_user: isNewUser
      },
      session: {
        session: {
          access_token: signInData.session?.access_token || '',
          refresh_token: signInData.session?.refresh_token || '',
          user: signInData.user
        },
        user: signInData.user
      }
    }), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
      },
    });
    
  } catch (error) {
    console.error('verify-otp: Unhandled error:', error);
    return new Response(JSON.stringify({ error: 'Internal server error' }), {
      status: 500,
      headers: { 
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
      },
    });
  }
}) 